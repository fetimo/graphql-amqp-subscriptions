"use strict";

var _common = require("./common");

var _chai = require("chai");

require("mocha");

/* tslint:disable:no-unused-expression */
describe('Common', function () {
  it('should convert a string to a string', function () {
    var message = _common.Logger.convertMessage({
      fields: {
        deliveryTag: 1,
        redelivered: false,
        exchange: 'exchange',
        routingKey: 'test.test'
      },
      properties: {
        contentType: undefined,
        contentEncoding: undefined,
        headers: {},
        deliveryMode: undefined,
        priority: undefined,
        correlationId: undefined,
        replyTo: undefined,
        expiration: undefined,
        messageId: undefined,
        timestamp: undefined,
        type: undefined,
        userId: undefined,
        appId: undefined,
        clusterId: undefined
      },
      content: Buffer.from('test')
    });

    (0, _chai.expect)(message).to.exist;
    (0, _chai.expect)(message).to.equal('test');
  });
  it('should convert a stringified JSON to a JSON', function () {
    var message = _common.Logger.convertMessage({
      fields: {
        deliveryTag: 1,
        redelivered: false,
        exchange: 'exchange',
        routingKey: 'test.test'
      },
      properties: {
        contentType: undefined,
        contentEncoding: undefined,
        headers: {},
        deliveryMode: undefined,
        priority: undefined,
        correlationId: undefined,
        replyTo: undefined,
        expiration: undefined,
        messageId: undefined,
        timestamp: undefined,
        type: undefined,
        userId: undefined,
        appId: undefined,
        clusterId: undefined
      },
      content: Buffer.from('{"test":"data"}')
    });

    (0, _chai.expect)(message).to.exist;
    (0, _chai.expect)(message.test).to.equal('data');
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9hbXFwL2NvbW1vbi50ZXN0LnRzIl0sIm5hbWVzIjpbImRlc2NyaWJlIiwiaXQiLCJtZXNzYWdlIiwiTG9nZ2VyIiwiY29udmVydE1lc3NhZ2UiLCJmaWVsZHMiLCJkZWxpdmVyeVRhZyIsInJlZGVsaXZlcmVkIiwiZXhjaGFuZ2UiLCJyb3V0aW5nS2V5IiwicHJvcGVydGllcyIsImNvbnRlbnRUeXBlIiwidW5kZWZpbmVkIiwiY29udGVudEVuY29kaW5nIiwiaGVhZGVycyIsImRlbGl2ZXJ5TW9kZSIsInByaW9yaXR5IiwiY29ycmVsYXRpb25JZCIsInJlcGx5VG8iLCJleHBpcmF0aW9uIiwibWVzc2FnZUlkIiwidGltZXN0YW1wIiwidHlwZSIsInVzZXJJZCIsImFwcElkIiwiY2x1c3RlcklkIiwiY29udGVudCIsIkJ1ZmZlciIsImZyb20iLCJ0byIsImV4aXN0IiwiZXF1YWwiLCJ0ZXN0Il0sIm1hcHBpbmdzIjoiOztBQUNBOztBQUNBOztBQUNBOztBQUhBO0FBS0FBLFFBQVEsQ0FBQyxRQUFELEVBQVcsWUFBTTtBQUV2QkMsRUFBQUEsRUFBRSxDQUFDLHFDQUFELEVBQXdDLFlBQU07QUFDOUMsUUFBTUMsT0FBTyxHQUFHQyxlQUFPQyxjQUFQLENBQXNCO0FBQ3BDQyxNQUFBQSxNQUFNLEVBQUU7QUFDTkMsUUFBQUEsV0FBVyxFQUFFLENBRFA7QUFFTkMsUUFBQUEsV0FBVyxFQUFFLEtBRlA7QUFHTkMsUUFBQUEsUUFBUSxFQUFFLFVBSEo7QUFJTkMsUUFBQUEsVUFBVSxFQUFFO0FBSk4sT0FENEI7QUFPcENDLE1BQUFBLFVBQVUsRUFBRTtBQUNWQyxRQUFBQSxXQUFXLEVBQUVDLFNBREg7QUFFVkMsUUFBQUEsZUFBZSxFQUFFRCxTQUZQO0FBR1ZFLFFBQUFBLE9BQU8sRUFBRSxFQUhDO0FBSVZDLFFBQUFBLFlBQVksRUFBRUgsU0FKSjtBQUtWSSxRQUFBQSxRQUFRLEVBQUVKLFNBTEE7QUFNVkssUUFBQUEsYUFBYSxFQUFFTCxTQU5MO0FBT1ZNLFFBQUFBLE9BQU8sRUFBRU4sU0FQQztBQVFWTyxRQUFBQSxVQUFVLEVBQUVQLFNBUkY7QUFTVlEsUUFBQUEsU0FBUyxFQUFFUixTQVREO0FBVVZTLFFBQUFBLFNBQVMsRUFBRVQsU0FWRDtBQVdWVSxRQUFBQSxJQUFJLEVBQUVWLFNBWEk7QUFZVlcsUUFBQUEsTUFBTSxFQUFFWCxTQVpFO0FBYVZZLFFBQUFBLEtBQUssRUFBRVosU0FiRztBQWNWYSxRQUFBQSxTQUFTLEVBQUViO0FBZEQsT0FQd0I7QUF1QnBDYyxNQUFBQSxPQUFPLEVBQUVDLE1BQU0sQ0FBQ0MsSUFBUCxDQUFZLE1BQVo7QUF2QjJCLEtBQXRCLENBQWhCOztBQXlCQSxzQkFBTzFCLE9BQVAsRUFBZ0IyQixFQUFoQixDQUFtQkMsS0FBbkI7QUFDQSxzQkFBTzVCLE9BQVAsRUFBZ0IyQixFQUFoQixDQUFtQkUsS0FBbkIsQ0FBeUIsTUFBekI7QUFDRCxHQTVCQyxDQUFGO0FBOEJBOUIsRUFBQUEsRUFBRSxDQUFDLDZDQUFELEVBQWdELFlBQU07QUFDdEQsUUFBTUMsT0FBTyxHQUFHQyxlQUFPQyxjQUFQLENBQXNCO0FBQ3BDQyxNQUFBQSxNQUFNLEVBQUU7QUFDTkMsUUFBQUEsV0FBVyxFQUFFLENBRFA7QUFFTkMsUUFBQUEsV0FBVyxFQUFFLEtBRlA7QUFHTkMsUUFBQUEsUUFBUSxFQUFFLFVBSEo7QUFJTkMsUUFBQUEsVUFBVSxFQUFFO0FBSk4sT0FENEI7QUFPcENDLE1BQUFBLFVBQVUsRUFBRTtBQUNWQyxRQUFBQSxXQUFXLEVBQUVDLFNBREg7QUFFVkMsUUFBQUEsZUFBZSxFQUFFRCxTQUZQO0FBR1ZFLFFBQUFBLE9BQU8sRUFBRSxFQUhDO0FBSVZDLFFBQUFBLFlBQVksRUFBRUgsU0FKSjtBQUtWSSxRQUFBQSxRQUFRLEVBQUVKLFNBTEE7QUFNVkssUUFBQUEsYUFBYSxFQUFFTCxTQU5MO0FBT1ZNLFFBQUFBLE9BQU8sRUFBRU4sU0FQQztBQVFWTyxRQUFBQSxVQUFVLEVBQUVQLFNBUkY7QUFTVlEsUUFBQUEsU0FBUyxFQUFFUixTQVREO0FBVVZTLFFBQUFBLFNBQVMsRUFBRVQsU0FWRDtBQVdWVSxRQUFBQSxJQUFJLEVBQUVWLFNBWEk7QUFZVlcsUUFBQUEsTUFBTSxFQUFFWCxTQVpFO0FBYVZZLFFBQUFBLEtBQUssRUFBRVosU0FiRztBQWNWYSxRQUFBQSxTQUFTLEVBQUViO0FBZEQsT0FQd0I7QUF1QnBDYyxNQUFBQSxPQUFPLEVBQUVDLE1BQU0sQ0FBQ0MsSUFBUCxDQUFZLGlCQUFaO0FBdkIyQixLQUF0QixDQUFoQjs7QUF5QkEsc0JBQU8xQixPQUFQLEVBQWdCMkIsRUFBaEIsQ0FBbUJDLEtBQW5CO0FBQ0Esc0JBQU81QixPQUFPLENBQUM4QixJQUFmLEVBQXFCSCxFQUFyQixDQUF3QkUsS0FBeEIsQ0FBOEIsTUFBOUI7QUFDRCxHQTVCQyxDQUFGO0FBOEJELENBOURPLENBQVIiLCJzb3VyY2VzQ29udGVudCI6WyIvKiB0c2xpbnQ6ZGlzYWJsZTpuby11bnVzZWQtZXhwcmVzc2lvbiAqL1xuaW1wb3J0IHsgTG9nZ2VyIH0gZnJvbSAnLi9jb21tb24nO1xuaW1wb3J0IHsgZXhwZWN0IH0gZnJvbSAnY2hhaSc7XG5pbXBvcnQgJ21vY2hhJztcblxuZGVzY3JpYmUoJ0NvbW1vbicsICgpID0+IHtcblxuICBpdCgnc2hvdWxkIGNvbnZlcnQgYSBzdHJpbmcgdG8gYSBzdHJpbmcnLCAoKSA9PiB7XG4gICAgY29uc3QgbWVzc2FnZSA9IExvZ2dlci5jb252ZXJ0TWVzc2FnZSh7XG4gICAgICBmaWVsZHM6IHtcbiAgICAgICAgZGVsaXZlcnlUYWc6IDEsXG4gICAgICAgIHJlZGVsaXZlcmVkOiBmYWxzZSxcbiAgICAgICAgZXhjaGFuZ2U6ICdleGNoYW5nZScsXG4gICAgICAgIHJvdXRpbmdLZXk6ICd0ZXN0LnRlc3QnXG4gICAgICB9LFxuICAgICAgcHJvcGVydGllczoge1xuICAgICAgICBjb250ZW50VHlwZTogdW5kZWZpbmVkLFxuICAgICAgICBjb250ZW50RW5jb2Rpbmc6IHVuZGVmaW5lZCxcbiAgICAgICAgaGVhZGVyczoge30sXG4gICAgICAgIGRlbGl2ZXJ5TW9kZTogdW5kZWZpbmVkLFxuICAgICAgICBwcmlvcml0eTogdW5kZWZpbmVkLFxuICAgICAgICBjb3JyZWxhdGlvbklkOiB1bmRlZmluZWQsXG4gICAgICAgIHJlcGx5VG86IHVuZGVmaW5lZCxcbiAgICAgICAgZXhwaXJhdGlvbjogdW5kZWZpbmVkLFxuICAgICAgICBtZXNzYWdlSWQ6IHVuZGVmaW5lZCxcbiAgICAgICAgdGltZXN0YW1wOiB1bmRlZmluZWQsXG4gICAgICAgIHR5cGU6IHVuZGVmaW5lZCxcbiAgICAgICAgdXNlcklkOiB1bmRlZmluZWQsXG4gICAgICAgIGFwcElkOiB1bmRlZmluZWQsXG4gICAgICAgIGNsdXN0ZXJJZDogdW5kZWZpbmVkXG4gICAgICB9LFxuICAgICAgY29udGVudDogQnVmZmVyLmZyb20oJ3Rlc3QnKVxuICAgIH0pO1xuICAgIGV4cGVjdChtZXNzYWdlKS50by5leGlzdDtcbiAgICBleHBlY3QobWVzc2FnZSkudG8uZXF1YWwoJ3Rlc3QnKTtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCBjb252ZXJ0IGEgc3RyaW5naWZpZWQgSlNPTiB0byBhIEpTT04nLCAoKSA9PiB7XG4gICAgY29uc3QgbWVzc2FnZSA9IExvZ2dlci5jb252ZXJ0TWVzc2FnZSh7XG4gICAgICBmaWVsZHM6IHtcbiAgICAgICAgZGVsaXZlcnlUYWc6IDEsXG4gICAgICAgIHJlZGVsaXZlcmVkOiBmYWxzZSxcbiAgICAgICAgZXhjaGFuZ2U6ICdleGNoYW5nZScsXG4gICAgICAgIHJvdXRpbmdLZXk6ICd0ZXN0LnRlc3QnXG4gICAgICB9LFxuICAgICAgcHJvcGVydGllczoge1xuICAgICAgICBjb250ZW50VHlwZTogdW5kZWZpbmVkLFxuICAgICAgICBjb250ZW50RW5jb2Rpbmc6IHVuZGVmaW5lZCxcbiAgICAgICAgaGVhZGVyczoge30sXG4gICAgICAgIGRlbGl2ZXJ5TW9kZTogdW5kZWZpbmVkLFxuICAgICAgICBwcmlvcml0eTogdW5kZWZpbmVkLFxuICAgICAgICBjb3JyZWxhdGlvbklkOiB1bmRlZmluZWQsXG4gICAgICAgIHJlcGx5VG86IHVuZGVmaW5lZCxcbiAgICAgICAgZXhwaXJhdGlvbjogdW5kZWZpbmVkLFxuICAgICAgICBtZXNzYWdlSWQ6IHVuZGVmaW5lZCxcbiAgICAgICAgdGltZXN0YW1wOiB1bmRlZmluZWQsXG4gICAgICAgIHR5cGU6IHVuZGVmaW5lZCxcbiAgICAgICAgdXNlcklkOiB1bmRlZmluZWQsXG4gICAgICAgIGFwcElkOiB1bmRlZmluZWQsXG4gICAgICAgIGNsdXN0ZXJJZDogdW5kZWZpbmVkXG4gICAgICB9LFxuICAgICAgY29udGVudDogQnVmZmVyLmZyb20oJ3tcInRlc3RcIjpcImRhdGFcIn0nKVxuICAgIH0pO1xuICAgIGV4cGVjdChtZXNzYWdlKS50by5leGlzdDtcbiAgICBleHBlY3QobWVzc2FnZS50ZXN0KS50by5lcXVhbCgnZGF0YScpO1xuICB9KTtcblxufSk7XG4iXX0=