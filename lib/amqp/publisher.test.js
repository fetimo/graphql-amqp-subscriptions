"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _publisher = require("./publisher");

var _chai = require("chai");

require("mocha");

var _debug = _interopRequireDefault(require("debug"));

var _amqplib = _interopRequireDefault(require("amqplib"));

/* tslint:disable:no-unused-expression */
var logger = (0, _debug.default)('AMQPPubSub');
var conn;
var publisher;
describe('AMQP Publisher', function () {
  before(function (done) {
    _amqplib.default.connect('amqp://guest:guest@localhost:5672?heartbeat=30').then(function (amqpConn) {
      conn = amqpConn;
      done();
    }).catch(function (err) {
      done(err);
    });
  });
  after(function (done) {
    conn.close().then(function () {
      done();
    }).catch(function (err) {
      done(err);
    });
  });
  it('should create new instance of AMQPPublisher class', function () {
    publisher = new _publisher.AMQPPublisher(conn, logger);
    (0, _chai.expect)(publisher).to.exist;
  });
  it('should publish a message to an exchange', function (done) {
    publisher.publish('exchange', 'test.test', {
      test: 'data'
    }).then(function () {
      done();
    }).catch(function (err) {
      (0, _chai.expect)(err).to.not.exist;
      done();
    });
  });
  it('should publish a second message to an exchange', function (done) {
    publisher.publish('exchange', 'test.test', {
      test: 'data'
    }).then(function () {
      done();
    }).catch(function (err) {
      (0, _chai.expect)(err).to.not.exist;
      done();
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9hbXFwL3B1Ymxpc2hlci50ZXN0LnRzIl0sIm5hbWVzIjpbImxvZ2dlciIsImNvbm4iLCJwdWJsaXNoZXIiLCJkZXNjcmliZSIsImJlZm9yZSIsImRvbmUiLCJhbXFwIiwiY29ubmVjdCIsInRoZW4iLCJhbXFwQ29ubiIsImNhdGNoIiwiZXJyIiwiYWZ0ZXIiLCJjbG9zZSIsIml0IiwiQU1RUFB1Ymxpc2hlciIsInRvIiwiZXhpc3QiLCJwdWJsaXNoIiwidGVzdCIsIm5vdCJdLCJtYXBwaW5ncyI6Ijs7OztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUxBO0FBT0EsSUFBTUEsTUFBTSxHQUFHLG9CQUFNLFlBQU4sQ0FBZjtBQUVBLElBQUlDLElBQUo7QUFDQSxJQUFJQyxTQUFKO0FBRUFDLFFBQVEsQ0FBQyxnQkFBRCxFQUFtQixZQUFNO0FBRS9CQyxFQUFBQSxNQUFNLENBQUMsVUFBQ0MsSUFBRCxFQUFVO0FBQ2ZDLHFCQUFLQyxPQUFMLENBQWEsZ0RBQWIsRUFDQ0MsSUFERCxDQUNNLFVBQUFDLFFBQVEsRUFBSTtBQUNoQlIsTUFBQUEsSUFBSSxHQUFHUSxRQUFQO0FBQ0FKLE1BQUFBLElBQUk7QUFDTCxLQUpELEVBS0NLLEtBTEQsQ0FLTyxVQUFBQyxHQUFHLEVBQUk7QUFDWk4sTUFBQUEsSUFBSSxDQUFDTSxHQUFELENBQUo7QUFDRCxLQVBEO0FBUUQsR0FUSyxDQUFOO0FBV0FDLEVBQUFBLEtBQUssQ0FBQyxVQUFDUCxJQUFELEVBQVU7QUFDZEosSUFBQUEsSUFBSSxDQUFDWSxLQUFMLEdBQ0NMLElBREQsQ0FDTSxZQUFNO0FBQ1ZILE1BQUFBLElBQUk7QUFDTCxLQUhELEVBSUNLLEtBSkQsQ0FJTyxVQUFBQyxHQUFHLEVBQUk7QUFDWk4sTUFBQUEsSUFBSSxDQUFDTSxHQUFELENBQUo7QUFDRCxLQU5EO0FBT0QsR0FSSSxDQUFMO0FBVUFHLEVBQUFBLEVBQUUsQ0FBQyxtREFBRCxFQUFzRCxZQUFNO0FBQzVEWixJQUFBQSxTQUFTLEdBQUcsSUFBSWEsd0JBQUosQ0FBa0JkLElBQWxCLEVBQXdCRCxNQUF4QixDQUFaO0FBQ0Esc0JBQU9FLFNBQVAsRUFBa0JjLEVBQWxCLENBQXFCQyxLQUFyQjtBQUNELEdBSEMsQ0FBRjtBQUtBSCxFQUFBQSxFQUFFLENBQUMseUNBQUQsRUFBNEMsVUFBQ1QsSUFBRCxFQUFVO0FBQ3RESCxJQUFBQSxTQUFTLENBQUNnQixPQUFWLENBQWtCLFVBQWxCLEVBQThCLFdBQTlCLEVBQTJDO0FBQUNDLE1BQUFBLElBQUksRUFBRTtBQUFQLEtBQTNDLEVBQ0NYLElBREQsQ0FDTSxZQUFNO0FBQ1ZILE1BQUFBLElBQUk7QUFDTCxLQUhELEVBSUNLLEtBSkQsQ0FJTyxVQUFBQyxHQUFHLEVBQUk7QUFDWix3QkFBT0EsR0FBUCxFQUFZSyxFQUFaLENBQWVJLEdBQWYsQ0FBbUJILEtBQW5CO0FBQ0FaLE1BQUFBLElBQUk7QUFDTCxLQVBEO0FBUUQsR0FUQyxDQUFGO0FBV0FTLEVBQUFBLEVBQUUsQ0FBQyxnREFBRCxFQUFtRCxVQUFDVCxJQUFELEVBQVU7QUFDN0RILElBQUFBLFNBQVMsQ0FBQ2dCLE9BQVYsQ0FBa0IsVUFBbEIsRUFBOEIsV0FBOUIsRUFBMkM7QUFBQ0MsTUFBQUEsSUFBSSxFQUFFO0FBQVAsS0FBM0MsRUFDQ1gsSUFERCxDQUNNLFlBQU07QUFDVkgsTUFBQUEsSUFBSTtBQUNMLEtBSEQsRUFJQ0ssS0FKRCxDQUlPLFVBQUFDLEdBQUcsRUFBSTtBQUNaLHdCQUFPQSxHQUFQLEVBQVlLLEVBQVosQ0FBZUksR0FBZixDQUFtQkgsS0FBbkI7QUFDQVosTUFBQUEsSUFBSTtBQUNMLEtBUEQ7QUFRRCxHQVRDLENBQUY7QUFXRCxDQWxETyxDQUFSIiwic291cmNlc0NvbnRlbnQiOlsiLyogdHNsaW50OmRpc2FibGU6bm8tdW51c2VkLWV4cHJlc3Npb24gKi9cbmltcG9ydCB7IEFNUVBQdWJsaXNoZXIgfSBmcm9tICcuL3B1Ymxpc2hlcic7XG5pbXBvcnQgeyBleHBlY3QgfSBmcm9tICdjaGFpJztcbmltcG9ydCAnbW9jaGEnO1xuaW1wb3J0IERlYnVnIGZyb20gJ2RlYnVnJztcbmltcG9ydCBhbXFwIGZyb20gJ2FtcXBsaWInO1xuXG5jb25zdCBsb2dnZXIgPSBEZWJ1ZygnQU1RUFB1YlN1YicpO1xuXG5sZXQgY29ubjogYW1xcC5Db25uZWN0aW9uO1xubGV0IHB1Ymxpc2hlcjogQU1RUFB1Ymxpc2hlcjtcblxuZGVzY3JpYmUoJ0FNUVAgUHVibGlzaGVyJywgKCkgPT4ge1xuXG4gIGJlZm9yZSgoZG9uZSkgPT4ge1xuICAgIGFtcXAuY29ubmVjdCgnYW1xcDovL2d1ZXN0Omd1ZXN0QGxvY2FsaG9zdDo1NjcyP2hlYXJ0YmVhdD0zMCcpXG4gICAgLnRoZW4oYW1xcENvbm4gPT4ge1xuICAgICAgY29ubiA9IGFtcXBDb25uO1xuICAgICAgZG9uZSgpO1xuICAgIH0pXG4gICAgLmNhdGNoKGVyciA9PiB7XG4gICAgICBkb25lKGVycik7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGFmdGVyKChkb25lKSA9PiB7XG4gICAgY29ubi5jbG9zZSgpXG4gICAgLnRoZW4oKCkgPT4ge1xuICAgICAgZG9uZSgpO1xuICAgIH0pXG4gICAgLmNhdGNoKGVyciA9PiB7XG4gICAgICBkb25lKGVycik7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgY3JlYXRlIG5ldyBpbnN0YW5jZSBvZiBBTVFQUHVibGlzaGVyIGNsYXNzJywgKCkgPT4ge1xuICAgIHB1Ymxpc2hlciA9IG5ldyBBTVFQUHVibGlzaGVyKGNvbm4sIGxvZ2dlcik7XG4gICAgZXhwZWN0KHB1Ymxpc2hlcikudG8uZXhpc3Q7XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgcHVibGlzaCBhIG1lc3NhZ2UgdG8gYW4gZXhjaGFuZ2UnLCAoZG9uZSkgPT4ge1xuICAgIHB1Ymxpc2hlci5wdWJsaXNoKCdleGNoYW5nZScsICd0ZXN0LnRlc3QnLCB7dGVzdDogJ2RhdGEnfSlcbiAgICAudGhlbigoKSA9PiB7XG4gICAgICBkb25lKCk7XG4gICAgfSlcbiAgICAuY2F0Y2goZXJyID0+IHtcbiAgICAgIGV4cGVjdChlcnIpLnRvLm5vdC5leGlzdDtcbiAgICAgIGRvbmUoKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCBwdWJsaXNoIGEgc2Vjb25kIG1lc3NhZ2UgdG8gYW4gZXhjaGFuZ2UnLCAoZG9uZSkgPT4ge1xuICAgIHB1Ymxpc2hlci5wdWJsaXNoKCdleGNoYW5nZScsICd0ZXN0LnRlc3QnLCB7dGVzdDogJ2RhdGEnfSlcbiAgICAudGhlbigoKSA9PiB7XG4gICAgICBkb25lKCk7XG4gICAgfSlcbiAgICAuY2F0Y2goZXJyID0+IHtcbiAgICAgIGV4cGVjdChlcnIpLnRvLm5vdC5leGlzdDtcbiAgICAgIGRvbmUoKTtcbiAgICB9KTtcbiAgfSk7XG5cbn0pO1xuIl19