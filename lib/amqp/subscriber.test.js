"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _subscriber = require("./subscriber");

var _publisher = require("./publisher");

var _chai = require("chai");

require("mocha");

var _debug = _interopRequireDefault(require("debug"));

var _amqplib = _interopRequireDefault(require("amqplib"));

/* tslint:disable:no-unused-expression */
var logger = (0, _debug.default)('AMQPPubSub');
var conn;
var subscriber;
var publisher;
describe('AMQP Subscriber', function () {
  before(function (done) {
    _amqplib.default.connect('amqp://guest:guest@localhost:5672?heartbeat=30').then(function (amqpConn) {
      conn = amqpConn;
      done();
    }).catch(function (err) {
      done(err);
    });
  });
  after(function (done) {
    conn.close().then(function () {
      done();
    }).catch(function (err) {
      done(err);
    });
  });
  it('should create new instance of AMQPSubscriber class', function () {
    subscriber = new _subscriber.AMQPSubscriber(conn, logger);
    (0, _chai.expect)(subscriber).to.exist;
  });
  it('should create new instance of AMQPPublisher class', function () {
    publisher = new _publisher.AMQPPublisher(conn, logger);
    (0, _chai.expect)(publisher).to.exist;
  });
  it('should be able to receive a message through an exchange', function (done) {
    subscriber.subscribe('exchange', '*.test', function (routingKey, message) {
      (0, _chai.expect)(routingKey).to.exist;
      (0, _chai.expect)(message).to.exist;
      (0, _chai.expect)(message.test).to.exist;
      (0, _chai.expect)(message.test).to.equal('data');
      done();
    }).then(function (disposer) {
      (0, _chai.expect)(disposer).to.exist;
      publisher.publish('exchange', 'test.test', {
        test: 'data'
      }).then(function () {
        (0, _chai.expect)(true).to.equal(true);
      }).catch(function (err) {
        (0, _chai.expect)(err).to.not.exist;
        done();
      });
    }).catch(function (err) {
      (0, _chai.expect)(err).to.not.exist;
      done();
    });
  });
  it('should be able to unsubscribe', function (done) {
    subscriber.subscribe('exchange', 'test.test', function () {
      done(new Error('Should not reach'));
    }).then(function (disposer) {
      (0, _chai.expect)(disposer).to.exist;
      disposer().then(function () {
        done();
      });
    }).catch(function (err) {
      (0, _chai.expect)(err).to.not.exist;
      done();
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9hbXFwL3N1YnNjcmliZXIudGVzdC50cyJdLCJuYW1lcyI6WyJsb2dnZXIiLCJjb25uIiwic3Vic2NyaWJlciIsInB1Ymxpc2hlciIsImRlc2NyaWJlIiwiYmVmb3JlIiwiZG9uZSIsImFtcXAiLCJjb25uZWN0IiwidGhlbiIsImFtcXBDb25uIiwiY2F0Y2giLCJlcnIiLCJhZnRlciIsImNsb3NlIiwiaXQiLCJBTVFQU3Vic2NyaWJlciIsInRvIiwiZXhpc3QiLCJBTVFQUHVibGlzaGVyIiwic3Vic2NyaWJlIiwicm91dGluZ0tleSIsIm1lc3NhZ2UiLCJ0ZXN0IiwiZXF1YWwiLCJkaXNwb3NlciIsInB1Ymxpc2giLCJub3QiLCJFcnJvciJdLCJtYXBwaW5ncyI6Ijs7OztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQU5BO0FBUUEsSUFBTUEsTUFBTSxHQUFHLG9CQUFNLFlBQU4sQ0FBZjtBQUVBLElBQUlDLElBQUo7QUFDQSxJQUFJQyxVQUFKO0FBQ0EsSUFBSUMsU0FBSjtBQUVBQyxRQUFRLENBQUMsaUJBQUQsRUFBb0IsWUFBTTtBQUVoQ0MsRUFBQUEsTUFBTSxDQUFDLFVBQUNDLElBQUQsRUFBVTtBQUNmQyxxQkFBS0MsT0FBTCxDQUFhLGdEQUFiLEVBQ0NDLElBREQsQ0FDTSxVQUFBQyxRQUFRLEVBQUk7QUFDaEJULE1BQUFBLElBQUksR0FBR1MsUUFBUDtBQUNBSixNQUFBQSxJQUFJO0FBQ0wsS0FKRCxFQUtDSyxLQUxELENBS08sVUFBQUMsR0FBRyxFQUFJO0FBQ1pOLE1BQUFBLElBQUksQ0FBQ00sR0FBRCxDQUFKO0FBQ0QsS0FQRDtBQVFELEdBVEssQ0FBTjtBQVdBQyxFQUFBQSxLQUFLLENBQUMsVUFBQ1AsSUFBRCxFQUFVO0FBQ2RMLElBQUFBLElBQUksQ0FBQ2EsS0FBTCxHQUNDTCxJQURELENBQ00sWUFBTTtBQUNWSCxNQUFBQSxJQUFJO0FBQ0wsS0FIRCxFQUlDSyxLQUpELENBSU8sVUFBQUMsR0FB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eHByZXNzaW9uICovXG5pbXBvcnQgeyBBTVFQU3Vic2NyaWJlciB9IGZyb20gJy4vc3Vic2NyaWJlcic7XG5pbXBvcnQgeyBBTVFQUHVibGlzaGVyIH0gZnJvbSAnLi9wdWJsaXNoZXInO1xuaW1wb3J0IHsgZXhwZWN0IH0gZnJvbSAnY2hhaSc7XG5pbXBvcnQgJ21vY2hhJztcbmltcG9ydCBEZWJ1ZyBmcm9tICdkZWJ1Zyc7XG5pbXBvcnQgYW1xcCBmcm9tICdhbXFwbGliJztcblxuY29uc3QgbG9nZ2VyID0gRGVidWcoJ0FNUVBQdWJTdWInKTtcblxubGV0IGNvbm46IGFtcXAuQ29ubmVjdGlvbjtcbmxldCBzdWJzY3JpYmVyOiBBTVFQU3Vic2NyaWJlcjtcbmxldCBwdWJsaXNoZXI6IEFNUVBQdWJsaXNoZXI7XG5cbmRlc2NyaWJlKCdBTVFQIFN1YnNjcmliZXInLCAoKSA9PiB7XG5cbiAgYmVmb3JlKChkb25lKSA9PiB7XG4gICAgYW1xcC5jb25uZWN0KCdhbXFwOi8vZ3Vlc3Q6Z3Vlc3RAbG9jYWxob3N0OjU2NzI/aGVhcnRiZWF0PTMwJylcbiAgICAudGhlbihhbXFwQ29ubiA9PiB7XG4gICAgICBjb25uID0gYW1xcENvbm47XG4gICAgICBkb25lKCk7XG4gICAgfSlcbiAgICAuY2F0Y2goZXJyID0+IHtcbiAgICAgIGRvbmUoZXJyKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgYWZ0ZXIoKGRvbmUpID0+IHtcbiAgICBjb25uLmNsb3NlKClcbiAgICAudGhlbigoKSA9PiB7XG4gICAgICBkb25lKCk7XG4gICAgfSlcbiAgICAuY2F0Y2goZXJyID0+IHtcbiAgICAgIGRvbmUoZXJyKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCBjcmVhdGUgbmV3IGluc3RhbmNlIG9mIEFNUVBTdWJzY3JpYmVyIGNsYXNzJywgKCkgPT4ge1xuICAgIHN1YnNjcmliZXIgPSBuZXcgQU1RUFN1YnNjcmliZXIoY29ubiwgbG9nZ2VyKTtcbiAgICBleHBlY3Qoc3Vic2NyaWJlcikudG8uZXhpc3Q7XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgY3JlYXRlIG5ldyBpbnN0YW5jZSBvZiBBTVFQUHVibGlzaGVyIGNsYXNzJywgKCkgPT4ge1xuICAgIHB1Ymxpc2hlciA9IG5ldyBBTVFQUHVibGlzaGVyKGNvbm4sIGxvZ2dlcik7XG4gICAgZXhwZWN0KHB1Ymxpc2hlcikudG8uZXhpc3Q7XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgYmUgYWJsZSB0byByZWNlaXZlIGEgbWVzc2FnZSB0aHJvdWdoIGFuIGV4Y2hhbmdlJywgKGRvbmUpID0+IHtcbiAgICBzdWJzY3JpYmVyLnN1YnNjcmliZSgnZXhjaGFuZ2UnLCAnKi50ZXN0JywgKHJvdXRpbmdLZXksIG1lc3NhZ2UpID0+IHtcbiAgICAgIGV4cGVjdChyb3V0aW5nS2V5KS50by5leGlzdDtcbiAgICAgIGV4cGVjdChtZXNzYWdlKS50by5leGlzdDtcbiAgICAgIGV4cGVjdChtZXNzYWdlLnRlc3QpLnRvLmV4aXN0O1xuICAgICAgZXhwZWN0KG1lc3NhZ2UudGVzdCkudG8uZXF1YWwoJ2RhdGEnKTtcbiAgICAgIGRvbmUoKTtcbiAgICB9KVxuICAgIC50aGVuKGRpc3Bvc2VyID0+IHtcbiAgICAgIGV4cGVjdChkaXNwb3NlcikudG8uZXhpc3Q7XG4gICAgICBwdWJsaXNoZXIucHVibGlzaCgnZXhjaGFuZ2UnLCAndGVzdC50ZXN0Jywge3Rlc3Q6ICdkYXRhJ30pXG4gICAgICAudGhlbigoKSA9PiB7XG4gICAgICAgIGV4cGVjdCh0cnVlKS50by5lcXVhbCh0cnVlKTtcbiAgICAgIH0pXG4gICAgICAuY2F0Y2goZXJyID0+IHtcbiAgICAgICAgZXhwZWN0KGVycikudG8ubm90LmV4aXN0O1xuICAgICAgICBkb25lKCk7XG4gICAgICB9KTtcbiAgICB9KVxuICAgIC5jYXRjaChlcnIgPT4ge1xuICAgICAgZXhwZWN0KGVycikudG8ubm90LmV4aXN0O1xuICAgICAgZG9uZSgpO1xuICAgIH0pO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIGJlIGFibGUgdG8gdW5zdWJzY3JpYmUnLCAoZG9uZSkgPT4ge1xuICAgIHN1YnNjcmliZXIuc3Vic2NyaWJlKCdleGNoYW5nZScsICd0ZXN0LnRlc3QnLCAoKSA9PiB7XG4gICAgICBkb25lKG5ldyBFcnJvcignU2hvdWxkIG5vdCByZWFjaCcpKTtcbiAgICB9KVxuICAgIC50aGVuKGRpc3Bvc2VyID0+IHtcbiAgICAgIGV4cGVjdChkaXNwb3NlcikudG8uZXhpc3Q7XG4gICAgICBkaXNwb3NlcigpXG4gICAgICAudGhlbigoKSA9PiB7XG4gICAgICAgIGRvbmUoKTtcbiAgICAgIH0pO1xuICAgIH0pXG4gICAgLmNhdGNoKGVyciA9PiB7XG4gICAgICBleHBlY3QoZXJyKS50by5ub3QuZXhpc3Q7XG4gICAgICBkb25lKCk7XG4gICAgfSk7XG4gIH0pO1xuXG59KTtcbiJdfQ==