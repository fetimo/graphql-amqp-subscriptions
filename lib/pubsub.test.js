"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _pubsub = require("./pubsub");

var _chai = require("chai");

require("mocha");

var _amqplib = _interopRequireDefault(require("amqplib"));

/* tslint:disable:no-unused-expression */
var conn;
var pubsub;
describe('AMQP PubSub', function () {
  before(function (done) {
    _amqplib.default.connect('amqp://guest:guest@localhost:5672?heartbeat=30').then(function (amqpConn) {
      conn = amqpConn;
      done();
    }).catch(function (err) {
      done(err);
    });
  });
  after(function (done) {
    conn.close().then(function () {
      done();
    }).catch(function (err) {
      done(err);
    });
  });
  it('should create new instance of AMQPPubSub class', function () {
    pubsub = new _pubsub.AMQPPubSub({
      connection: conn
    });
    (0, _chai.expect)(pubsub).to.exist;
  });
  it('should be able to receive a message with the appropriate routingKey', function (done) {
    pubsub.subscribe('testx.*', function (message) {
      (0, _chai.expect)(message).to.exist;
      (0, _chai.expect)(message.test).to.equal('data');
      done();
    }).then(function (subscriberId) {
      (0, _chai.expect)(subscriberId).to.exist;
      pubsub.publish('testx.test', {
        test: 'data'
      }).then(function () {
        (0, _chai.expect)(true).to.equal(true);
      }).catch(function (err) {
        (0, _chai.expect)(err).to.not.exist;
        done();
      });
    }).catch(function (err) {
      (0, _chai.expect)(err).to.not.exist;
      done();
    });
  });
  it('should be able to unsubscribe', function (done) {
    pubsub.subscribe('test.test', function () {
      done(new Error('Should not reach'));
    }).then(function (subscriberId) {
      (0, _chai.expect)(subscriberId).to.exist;
      (0, _chai.expect)(isNaN(subscriberId)).to.equal(false);
      pubsub.unsubscribe(subscriberId).then(function () {
        done();
      }).catch(function (err) {
        (0, _chai.expect)(err).to.not.exist;
      });
    }).catch(function (err) {
      (0, _chai.expect)(err).to.not.exist;
      done();
    });
  });
  it('should be able to receive a message after one of two subscribers unsubscribed', function (done) {
    // Subscribe two
    pubsub.subscribe('testy.test', function () {
      done(new Error('Should not reach'));
    }).then(function (id1) {
      pubsub.subscribe('testy.test', function (message) {
        // Receive message
        (0, _chai.expect)(message).to.exist;
        (0, _chai.expect)(message.test).to.equal('data');
        done();
      }).then(function (id2) {
        (0, _chai.expect)(id1).to.exist;
        (0, _chai.expect)(id2).to.exist;
        (0, _chai.expect)(id1).to.not.equal(id2); // Unsubscribe one

        pubsub.unsubscribe(id1).then(function () {
          pubsub.publish('testy.test', {
            test: 'data'
          }).then(function () {
            (0, _chai.expect)(true).to.equal(true);
          }).catch(function (err) {
            (0, _chai.expect)(err).to.not.exist;
            done();
          });
        }).catch(function (err) {
          (0, _chai.expect)(err).to.not.exist;
        });
      }).catch(function (err) {
        (0, _chai.expect)(err).to.not.exist;
      });
    }).catch(function (err) {
      (0, _chai.expect)(err).to.not.exist;
      done();
    });
  });
  it('should be able to receive a message after one of two subscribers unsubscribed (concurrent)', function (done) {
    // Subscribe two
    Promise.all([pubsub.subscribe('testz.test', function () {
      done(new Error('Should not reach'));
    }), pubsub.subscribe('testz.test', function (message) {
      // Receive message
      (0, _chai.expect)(message).to.exist;
      (0, _chai.expect)(message.test).to.equal('data');
      done();
    })]).then(function (_ref) {
      var _ref2 = (0, _slicedToArray2.default)(_ref, 2),
          id1 = _ref2[0],
          id2 = _ref2[1];

      (0, _chai.expect)(id1).to.exist;
      (0, _chai.expect)(id2).to.exist;
      (0, _chai.expect)(id1).to.not.equal(id2); // Unsubscribe one

      pubsub.unsubscribe(id1).then(function () {
        pubsub.publish('testz.test', {
          test: 'data'
        }).then(function () {
          (0, _chai.expect)(true).to.equal(true);
        }).catch(function (err) {
          (0, _chai.expect)(err).to.not.exist;
          done();
        });
      }).catch(function (err) {
        (0, _chai.expect)(err).to.not.exist;
      });
    }).catch(function (err) {
      (0, _chai.expect)(err).to.not.exist;
      done();
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,